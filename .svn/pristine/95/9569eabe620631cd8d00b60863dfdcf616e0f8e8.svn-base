package webstmt.controller.sys;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;

import webstmt.entity.sys.Template;
import webstmt.service.sys.TemplateService;

@Controller
@RequestMapping("/dashboard/template")
public class TemplateController 
{
	@Autowired
	private TemplateService service;
	
	@GetMapping(value="/new")
	public String newTemplate()
	{
		return "/dashboard/template-new";
	}
	
	@PostMapping(value="/save")
	public String saveTemplate(@RequestParam("tpl-name") String name, @RequestParam("tpl-desc") String desc,@RequestParam("tpl-editor") String template, Model model)
	{
		System.out.println("Template: "+template);
		
		
		Template tpl = new Template();
		tpl.setName(name);
		tpl.setDescription(desc);
		tpl.setTemplate(template);
		
		long id = service.save(tpl);
		
		if(id>0)
		{
			model.addAttribute("result", "Save Successfully.");
		}
		else
		{
			model.addAttribute("result", "Failed to Save.");
		}
		
		return "/dashboard/template-save-result";
	}
	
	@GetMapping(value="/edit/{id}")
	public String showEdit(@PathVariable("id") long id, Model model)
	{
		Template template = service.read(id);
		
		if(template==null)
		{
			model.addAttribute("exist", false);
		}
		else
		{
			model.addAttribute("exist", true);
			model.addAttribute("template", template);
		}
		
		return "/dashboard/template-edit";
	}
	
	@PostMapping(value="/edit/{id}")
	public String editTemplate(@PathVariable("id")long id,@RequestParam("tpl-name") String name, @RequestParam("tpl-desc") String desc,@RequestParam("tpl-editor") String template, Model model)
	{
		System.out.println("Template: "+template);
		
		
		Template tpl = service.read(id);
		
		if(tpl!=null)
		{
			tpl.setName(name);
			tpl.setDescription(desc);
			tpl.setTemplate(template);
			
			long savedId = service.save(tpl);
			
			if(savedId>0)
			{
				model.addAttribute("result", "Save Successfully.");
			}
			else
			{
				model.addAttribute("result", "Failed to Save.");
			}
		}
		else
		{
			model.addAttribute("result", "No Such Template.");
		}
		
		return "/dashboard/template-edit-result";
	}
	
	@RequestMapping(value="", method= RequestMethod.GET)
	public String viewAllTemplates(Model model)
	{
		List<Template> templates = service.readAll();
		
		model.addAttribute("templates", templates);
		
		return "/dashboard/template-view-all";
	}
	
	@RequestMapping(value="/{id}", method= RequestMethod.GET, produces= {"application/json;charset=UTF-8"})
	@ResponseBody
	public String readTemplate(@PathVariable("id") long id)
	{
		Template template = service.read(id);
		
		Template jsonTpl = new Template();
		jsonTpl.setId(template.getId());
		jsonTpl.setName(template.getName());
		jsonTpl.setDescription(template.getDescription());
		jsonTpl.setTemplate(template.getTemplate());
		
		Gson gson = new Gson();
		
		String resp = gson.toJson(jsonTpl);
		
		return resp;
	}
	
	@DeleteMapping(value="/remove")
	@ResponseBody
	public String removeTemplate(Long id){
		
		service.remove(id);
		
		return "/dashboard/template-view-all";
	}
	
	@GetMapping(value="/search")
	@ResponseBody
	public Template searchTemplate(String templateName){
		
		Template template=service.search(templateName);
		
		
		return template;
	}
}
